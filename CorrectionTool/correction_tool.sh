#!/bin/bash
#SBATCH -p pibu_el8            # Partition to submit to
#SBATCH --job-name=correct     # Job name
#SBATCH -o brossa/correct.%A_%a.out    # Standard output file
#SBATCH -e brossa/correct.%A_%a.err    # Standard error file
#SBATCH --mem=164G


# This script is used to call all the tools and scripts necessary to create new bins
# that will contain methylation information.
# Each script includes a brief explanation of its function.
# For more information, I recommend checking the GitHub repository: https://github.com/Adrinavapau/Correction-Tool/tree/main


show_help() {
    echo ""
    echo "-----------------------------------------------------------------------------------------"
    echo "This script is used to call all the tools and scripts necessary to create new bins"
    echo "that will contain methylation information."
    echo "Each script includes a brief explanation of its function."
    echo "For more information, I recommend checking the GitHub repository: https://github.com/Adrinavapau/Correction-Tool/tree/main"
    echo "-----------------------------------------------------------------------------------------"
    echo ""
    echo "Us: $0 [-s] <bins_dir> <SMRT_dir> <assembly_fasta>"
    echo ""
    echo "Option:"
    echo "  -h       Shows this guide and ends."
    echo "  -s       Contigs with _ : changes '_' for '=' in the files needed .gff."
    echo "  -t       In case there are inf in the clustering."
    echo "  -c       Make the defould cluster and the defould bins (It's better if you make the cluster manual and then added to the filanstep)"
    echo ""
    echo "Arguments:"
    echo "  bins_dir          Path to the bins directory."
    echo "  output_dir        Path to the output directory of SMRT Link."
    echo "  assembly_fasta    Assembled fasta recomend Hifiasm or Fly."
    exit 0
}

# Inicializa variable para modo simulado
Equal=false
Tsmrt=false
Cluster=false
# Parseo de opciones
while getopts ":hstc" opt; do
    case ${opt} in
        h )
            show_help
            ;;
        s )
            Equal=true
            ;;
	t )
	    Tsmrt=true
	    ;;
	c )
	    Cluster=true
	    ;;
        \? )
            echo "Invalid option: -$OPTARG" >&2
            show_help
            ;;
    esac
done

# Elimina las opciones parseadas
shift $((OPTIND -1))

# Revisa si hay suficientes argumentos
if [ $# -ne 3 ]; then
    echo "Error: NÃºmero incorrecto de argumentos."
    show_help
fi



# Path to the directoty where the bins are
bins=$1 

# The SMRT Link oupt directory
OUTPATH=$2

# The assembled fasta
Assefas=$3


# List of required tools
required_tools=(
  gff2bed
  fuzznuc
  checkm2
  bedops
  gffread
  R
)

# Flag to track missing tools
missing=0

echo "Checking required tools..."

for tool in "${required_tools[@]}"; do
  if command -v "$tool" >/dev/null 2>&1; then
    echo "$tool is installed at: $(which $tool)"
  else
    echo "$tool is NOT installed or not in PATH."
    missing=1
  fi
done

if [ "$missing" -ne 0 ]; then
  echo " One or more required tools are missing. Exiting."
  exit 1
else
  echo " All required tools are installed."
fi


# This is to return to the original directory in case we move to another directory
RETURENPATH=$(pwd)

# copy the assembly fasta with this name so the codes can identify the file they are looking for.
cp $Assefas $OUTPATH/final_assembly.fasta


# filter the motif from all the methylated bases.
if [ "$Tsmrt" = true ]; then
	grep 'motif' $OUTPATH/motifs.gff > $OUTPATH/filtered_motifs.gff
fi

echo "Start gffbed"
# transform the GFF format to a format that it can be us to filter the wrong motif generated by SMRT
if [ "$Tsmrt" = true ]; then
	gff2bed < $OUTPATH/filtered_motifs.gff > $OUTPATH/motifs.bed
fi
if [ "$Tsmrt" = false ]; then
gff2bed < $OUTPATH/motifs.gff > $OUTPATH/motifs.bed
fi
echo "End gffbed"

if [ "$Tsmrt" = true ]; then
	echo "Start unmapped"
	# With this code we look for unmapped motif in the contigs
	chmod +x SRMT_unmapped.sh
	./SRMT_unmapped.sh $OUTPATH
	echo "End unmapped"
	echo "Start filtering SMRT motif"
	# With this code we filter the motif and we obtein the new filterd gff
	chmod +x make_True_motif.sh
	./make_True_motif.sh $OUTPATH
	echo "End filtering SMRT motif"
fi

if [ "$Equal" = true ]; then
	if [ "$Tsmrt" = true ]; then
		perl -i -pe 's/_/=/g'  $OUTPATH/filtered_motifs_filtered.gff
	
	else
		perl -i -pe 's/_/=/g'  $OUTPATH/motifs.gff
	fi
fi

echo "Start SMRT Sumary"
# This code makes a sumary of the methylation information obteined with SMRT

if [ "$Tsmrt" = true ]; then
	./gff2table.pl $OUTPATH/filtered_motifs_filtered.gff > $OUTPATH/sumary.csv
fi

if [ "$Tsmrt" = false ]; then
	./gff2table.pl $OUTPATH/motifs.gff > $OUTPATH/sumary.csv
fi
echo "End SMRT Sumary"

# copy the code to the place where it will work
cp new_emboss2.sh $OUTPATH

# uses Enboss2 and fuzznuc to perform this
cd $OUTPATH

echo "Start count all the motif for each contig"
# This code count the total number of motif that each contig have
chmod +x new_emboss2.sh
./new_emboss2.sh
echo "End the count"

if [ "$Equal" = true ]; then
	# for _ in contigs
	perl -i -pe 's/\//=/g'  $OUTPATH/resultados.csv
fi

cd $RETURENPATH

echo "Cheking the bins"
# This tool leat us check how good the bins are so we can comper with the corrected bins.
checkm2 predict --threads 30 --force --input $bins/*.fa --output-directory $OUTPATH/checkm2_output
echo "Bins cheked"

if [ $Cluster = true ]; then
	echo "Start methylation clusters"
	# In this step we call a R code so it generates the clusters from the methylation
	chmod +x make_clusters.R
	./make_clusters.R $OUTPATH
	echo "End methylation clusters"


	if [ "$Equal" = true ]; then
		perl -i -pe 's/=/_/g' $OUTPATH/Methyl_clust.csv
	fi
	
        chmod +x finalstep.sh
	./finalstep.sh $bins $OUTPATH/Methyl_clust.csv $Assefas

fi

echo "Finished!"

